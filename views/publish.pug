extends layout
block page
	if (index)
		- var menu = 'profile'
		- var menudata = data[geoindex]
		
	else
		- var menu = 'home'
		if (doc)
			- var menudata = doc
		else
			- var menudata = data[0]
block content
	- var zfactor = 0.15 * zoom;
	- var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	input(type="hidden", value= index)
	if (infowindow)
		include gallery.pug
		
	if (tl)
		if (menu !== 'home')
			- var ind = parseInt(index, 10)
			#arrows
				if ((ind + 1) < data[geoindex].content.length && (ind - 1) >= 0)
					a.arrow.left(href="/focus/"+geoindex+"/"+(ind+1)+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickLeft
					a.arrow.right(href="/focus/"+geoindex+"/"+(ind-1)+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickRight
				
					
				if ((ind - 1) < 0)
					a.arrow.left(href="/focus/"+geoindex+"/"+(ind+1)+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickLeft
					
					a.arrow.right(href="/focus/"+geoindex+"/"+data[geoindex].content[data[geoindex].content.length-1].index+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickRight
				if ((ind + 1) >= data[geoindex].content.length)
					a.arrow.left(href="/focus/"+geoindex+"/"+0+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickLeft
					a.arrow.right(href="/focus/"+geoindex+"/"+(ind-1)+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickRight
					
				
					
		else
			- var geoind = parseInt(geoindex, 10)
			#arrows
				if (geoindex+1 < data.length)
					a.arrow.left(href="/geofocus/"+(geoind + 1)+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickLeft
				else
					a.arrow.left(href="/geofocus/"+0+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickLeft
				if (geoindex-1 < 0)
					a.arrow.right(href="/geofocus/"+data[data.length-1].geoindex+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickRight
				else
					a.arrow.right(href="/geofocus/"+(geoind - 1)+"/"+zoom+"/"+lat+"/"+lng+"")
						i.ms-Icon.ms-Icon--chevronThickRight
		
	#map
	
	if (tl)
		#tl
			if (menu !== 'home')
				#wrapper(style="left: "+ (50-((new Date(data[geoindex].content[index].properties.time.begin).getFullYear() - tl[0].year + ((new Date(data[geoindex].content[index].properties.time.begin).getMonth()) / 11 ) )*(zoom*zfactor))*10) + "%")

					div.ms-Grid-col.ms-u-sm12
						each year, i in tl
							div.year(id= i, style="left: "+(i*(zoom*zfactor)) * 10 +"%; width: "+(zoom*zfactor)*10+"%")
								div.ms-Grid-col.ms-u-sm12
									span.ms-font-s #{year.year}
								each month, j in year.months
									if (zoom > 6)
										div.ms-Grid-col.ms-u-sm1.block
											span.ms-font-xs #{months[month]}
									else
										if (j === 0 || j === 3 || j === 6 || j === 9)
											div.ms-Grid-col.ms-u-sm1.block
												span.ms-font-xs &nbsp
										else
											div.ms-Grid-col.ms-u-sm1.noline
												span.ms-font-xs &nbsp
				
					div.ms-Grid-col.ms-u-sm12
						each module, j in data[geoindex].content
							if (doc && j === module.index)
								a.module.block(href="/focus/"+geoindex+"/"+module.index+"/"+6+"/"+lat+"/"+lng+"", title= module.properties.place, name= module.properties.label, id="" + geoindex + "@" + module.index + "", style="z-index: 0; height: 60px; margin-top: 18px; background-color: #BAD80A; left: "+ ((new Date(module.properties.time.begin).getFullYear() - tl[0].year + ((new Date(module.properties.time.begin).getMonth()) / 11 ) )*(zoom*zfactor))*10 + "%; width: "+ (((( new Date(module.properties.time.end).getFullYear() ) + ( ( new Date(module.properties.time.end).getMonth() ) / 11 )) - (( new Date(module.properties.time.begin).getFullYear() ) + ( ( new Date(module.properties.time.begin).getMonth() ) / 11 )) ) * (zoom*zfactor) ) * 10 + "%")
									span.ms-font-xs.ms-fontWeight-semibold(style="z-index: 2") #{module.properties.title}
							else
								a.module.block(href="/focus/"+geoindex+"/"+module.index+"/"+6+"/"+lat+"/"+lng+"", title= module.properties.place, name= module.properties.label, id="" + geoindex + "@" + module.index + "", style="left: "+ ((new Date(module.properties.time.begin).getFullYear() - tl[0].year + ((new Date(module.properties.time.begin).getMonth()) / 11 ) )*(zoom*zfactor))*10 + "%; width: "+ (((( new Date(module.properties.time.end).getFullYear() ) + ( ( new Date(module.properties.time.end).getMonth() ) / 11 )) - (( new Date(module.properties.time.begin).getFullYear() ) + ( ( new Date(module.properties.time.begin).getMonth() ) / 11 )) ) * (zoom*zfactor) ) * 10 + "%")
				
			else
				#wrapper(style="left: "+ (50-((new Date(data[geoindex].content[0].properties.time.begin).getFullYear() - tl[0].year + ((new Date(data[geoindex].content[0].properties.time.begin).getMonth()) / 11 ) )*(zoom*zfactor))*10) + "%")

					div.ms-Grid-col.ms-u-sm12
						each year, i in tl
							div.year(id= i, style="left: "+(i*(zoom*zfactor)) * 10 +"%; width: "+(zoom*zfactor)*10+"%")
								div.ms-Grid-col.ms-u-sm12
									span.ms-font-s #{year.year}
								each month, j in year.months
									if (zoom > 6)
										div.ms-Grid-col.ms-u-sm1.block
											span.ms-font-xs #{months[month]}
									else
										if (j === 0 || j === 3 || j === 6 || j === 9)
											div.ms-Grid-col.ms-u-sm1.block
												span.ms-font-xs &nbsp
										else
											div.ms-Grid-col.ms-u-sm1.noline
												span.ms-font-xs &nbsp
					div.ms-Grid-col.ms-u-sm12
						each module, j in data
							each entry, k in module.content
								if (doc && k === index)
									a.module.block(href="/"+module.name+"", title= doc.name, name= doc.publishers[0].username, id="" + doc.geoindex + "@" + k + "", style="z-index: 0; height: 60px; margin-top: 18px; background-color: #BAD80A; left: "+ ((new Date(entry.properties.time.begin).getFullYear() - tl[0].year + ((new Date(entry.properties.time.begin).getMonth()) / 11 ) )*(zoom*zfactor))*10 + "%; width: "+ (((( new Date(entry.properties.time.end).getFullYear() ) + ( ( new Date(entry.properties.time.end).getMonth() ) / 11 )) - (( new Date(entry.properties.time.begin).getFullYear() ) + ( ( new Date(entry.properties.time.begin).getMonth() ) / 11 )) ) * (zoom*zfactor) ) * 10 + "%")
										span.ms-font-xs.ms-fontWeight-semibold(style="z-index: 2") #{doc.name}
								else
									a.module.block(href="/geofocus/"+geoindex+"/"+6+"/"+lat+"/"+lng+"", title= module.name, name= module.publishers[0].username, id="" + module.geoindex + "@" + entry.index + "", style="left: "+ ((new Date(entry.properties.time.begin).getFullYear() - tl[0].year + ((new Date(entry.properties.time.begin).getMonth()) / 11 ) )*(zoom*zfactor))*10 + "%; width: "+ (((( new Date(entry.properties.time.end).getFullYear() ) + ( ( new Date(entry.properties.time.end).getMonth() ) / 11 )) - (( new Date(entry.properties.time.begin).getFullYear() ) + ( ( new Date(entry.properties.time.begin).getMonth() ) / 11 )) ) * (zoom*zfactor) ) * 10 + "%")
	
	if (infowindow && infowindow !== 'new' && infowindow !== 'edit')
		div.ms-Overlay.ms-Overlay--dark.js-togglePanel
		
	script(type="text/javascript").
		
		var index = #{index}
		var geoindex = #{geoindex}
		index = parseInt(index, 10)
		console.log(index)
		$('#wrapper').draggable({
			axis: "x"
		});
		$(document).on('click', '#editlayout', function(){
			$('#layout').css('display', 'block')
		})
		/*$('embed').on('change', function(){
			var dataurl = $(this).attr('src');
			var pdfurl = URL.createObjectURL( dataurl );
			$(this).attr('src', pdfurl);
		})*/
		$('#input_date1, #input_date2').pickadate({
			selectYears: 80,
			selectMonths: true,
			onOpen: function() {
				scrollIntoView( this.$node )
			}
		})
		function scrollIntoView( $node ) {
			$('html,body').animate({
				scrollTop: ~~$node.offset().top - 60
			})
		}
		$('.list > .ms-Panel-main').css({display: 'none'})
		$('.list').removeClass('is-open')
		$('.list').css({display: 'none'})
		$('#dropdown').slideUp(100); 
		$('#menu').removeClass('selected');
	
		$.fn.Panel = function () {
		    return this.each(function () {
				var $panel = $(this);
				var $panelMain = $panel.find("#mainpanel");
				$panelMain.css({display: "block"});
				$panel.addClass("is-open");
				$panelMain.on("animationend webkitAnimationEnd MSAnimationEnd", function(event) {
					if (event.originalEvent.animationName === "fadeOut") {
						$(this).css({display: "none"});
						$panelMain.css({display: "none"});
						$('.list > .ms-Panel-main').css({display: 'none'})
						$('.list').removeClass('is-open')
						$('.list').css({display: 'none'})
						$('.js-togglePanel').remove()
					}
				});
				$('.js-togglePanel').click(function(){
					console.log('clicked shadow')
					$panel.toggleClass("is-open");
					$panelMain.css({display: "none"});
					$('.list > .ms-Panel-main').css({display: 'none'})
					$('.list').removeClass('is-open')
					$('.list').css({display: 'none'})
					$('.js-togglePanel').remove()
				})
				$('#closepanel').click(function(){
					$panel.toggleClass("is-open");
					$panelMain.css({display: "none"});
					$('.js-togglePanel').remove()
					window.location.href = '/' || '/'+#{username} + '' ;
				})
			});
		};
		if ($.fn.Panel) {
		  $('.ms-Panel').Panel();
		}
		$(document).on('click', '#menu > li > a', function (e) { 
			e.preventDefault()

			if ($('#menu').hasClass('selected')) {

		        $('#dropdown').slideUp(100); 
		        $('#menu').removeClass("selected");

		    } 
			else 
			{
		        $('#menu').addClass('selected');
				$('#dropdown').slideDown(200);
				$('.drop').slideDown(200)
		        $('.username').css('z-index', 9999999);
			}

			e.stopPropagation();
		});
		
		$(document).on('click', '.ms-ListItem-image', function(e){
			e.preventDefault()
			var imgindex = $(this).attr('id')
			var index = $(this).attr('name')
			zoom = map.getZoom();
			var center = map.getCenter()
			var lat = center.lat;
			var lng = center.lng;
			
			if ($(this).hasClass('gallery')) {
				var windex = index.split('all_')[1]
				$.post('/gallery/'+geoindex+'/'+index+'/'+imgindex+'/'+zoom+'/'+lat+'/'+lng+'', function(){
					window.location.href = '/gallery/'+geoindex+'/'+windex+'/'+imgindex+'/'+zoom+'/'+lat+'/'+lng+'#scrollto_'+windex+''
				})
			} else {
				$.post('/gallery/'+geoindex+'/'+index+'/'+imgindex+'/'+zoom+'/'+lat+'/'+lng+'', function(){
					window.location.href = '/gallery/'+geoindex+'/'+index+'/'+imgindex+'/'+zoom+'/'+lat+'/'+lng+''
				})
			}
		})
		var map;
		
		map = new L.map('map', { //Leaflet map
		  	zoomControl: true,
		  	center: [#{lat}, #{lng}], 
		  	zoom: #{zoom},
			minZoom: 2,
		  	maxZoom: 18
		});
		var options3 = {
			attribution: 'Map tiles by <a href="http://mapbox.com/">Mapbox</a><a href="http://cartodb.com/attributions"</a>'
		};
		L.tileLayer('http://{s}.tiles.mapbox.com/v3/tbushman.iba1gl27/{z}/{x}/{y}.png', options3).addTo(map); 

		L.tileLayer('http://{s}.tiles.mapbox.com/v3/tbushman.1pnqxgvi/{z}/{x}/{y}.png').addTo(map); 
		var featurePane = map.createPane('featurePane');
		featurePane.style.zIndex = 20000;
		
		/*potential layers*/
		var infowindow = L.Control.extend({
			options: {
		        position: 'topright'
		    },

		    onAdd: function (map) {
		        var container = L.DomUtil.create('div', 'ms-Panel ms-Panel--small infowindoww')
				var shadow = L.DomUtil.create('div', 'ms-Overlay ms-Overlay--dark js-togglePanel')
				var content = L.DomUtil.create('div', 'ms-Panel-main ms-Grid')
				var inner = L.DomUtil.create('div', 'ms-Grid-row ms-Panel-contentInner')
				
				content.append(inner);
				container.append(shadow);
				container.append(content);
		        return container;
		    }
		})
		var MyControl = L.Control.extend({
		    options: {
		        position: 'topright'
		    },

		    onAdd: function (map) {
		        var container = L.DomUtil.create('div', 'ms-Panel ms-Panel--small list')
				var shadow = L.DomUtil.create('div', 'ms-Overlay ms-Overlay--dark js-togglePanel')
				var content = L.DomUtil.create('div', 'ms-Panel-main ms-Grid')
				var inner = L.DomUtil.create('div', 'ms-Grid-row ms-Panel-contentInner')
				
				content.append(inner);
				container.append(shadow);
				container.append(content);
		        return container;
		    }
		});
		var hous = L.Control.extend({
			options: {
		        position: 'topright'
		    },

		    onAdd: function (map) {
		        var container = L.DomUtil.create('div', 'ms-Panel ms-Panel--small hous')
				var shadow = L.DomUtil.create('div', 'ms-Overlay ms-Overlay--dark js-togglePanel')
				var content = L.DomUtil.create('div', 'ms-Panel-main ms-Grid')
				var inner = L.DomUtil.create('div', 'ms-Grid-row ms-Panel-contentInner')
				
				content.append(inner);
				container.append(shadow);
				container.append(content);
		        return container;
		    }
		});
		var es = L.Control.extend({
			options: {
		        position: 'topright'
		    },

		    onAdd: function (map) {
		        var container = L.DomUtil.create('div', 'ms-Panel ms-Panel--small es')
				var shadow = L.DomUtil.create('div', 'ms-Overlay ms-Overlay--dark js-togglePanel')
				var content = L.DomUtil.create('div', 'ms-Panel-main ms-Grid')
				var inner = L.DomUtil.create('div', 'ms-Grid-row ms-Panel-contentInner')
				
				content.append(inner);
				container.append(shadow);
				container.append(content);
		        return container;
		    }
		})
		map.addControl(new infowindow());
		map.addControl(new MyControl());
		map.addControl(new hous());
		map.addControl(new es());
		map.dragging.enable();
		map.touchZoom.enable();
		map.doubleClickZoom.enable();
		map.scrollWheelZoom.enable();
		map.boxZoom.enable();
		map.keyboard.enable();
		if (map.tap) map.tap.enable();
		document.getElementById('map').style.cursor='grab';
		
		
		var datalength = #{data.length}
		console.log(datalength)
		
		
		
		function getLayer(i, length) {
			$.getJSON('/mydata/'+i+'', function(data){


				function onEachFeature(feature, latlng) {

					var cut = feature.geometry.coordinates[0];
					feature.geometry.coordinates.splice(0, 1);
					feature.geometry.coordinates.push(cut)

				}
				if (length === 'all') {
					L.geoJSON(data.content, {
					    onEachFeature: onEachFeature,
						pointToLayer: function (feature, latlng) {
							var fillColor;
							console.log(feature.properties._id)
							if (feature.index === i) {
								fillColor = "#F11810"
							} else {
								fillColor = "#BAD80A"
							}
							var geojsonMarkerOptions = {
							    radius: 8,
							    fillColor: fillColor,
							    color: "#fff",
							    weight: 2,
							    opacity: 1,
							    fillOpacity: 0.8,
								className: i+"@"+feature.index
							};
							return L.circleMarker(latlng, geojsonMarkerOptions);
						}
					}).addTo(map);
				} else {
					L.geoJSON(data.content[data.content.length-1], {
					    onEachFeature: onEachFeature,
						pointToLayer: function (feature, latlng) {
							
							console.log(feature.properties._id)
							var fillColor = d3.scale.category10()(i);
							
							var geojsonMarkerOptions = {
							    radius: 8,
							    fillColor: fillColor,
							    color: "#fff",
							    weight: 2,
							    opacity: 1,
							    fillOpacity: 0.8,
								className: i+"@"+feature.index
							};
							return L.circleMarker(latlng, geojsonMarkerOptions);
						}
					}).addTo(map);
				}				
			})
		}
		var customIcon = L.icon({
			iconUrl: '/images/buttonmarker.svg',
			iconSize: [33, 33], 
		});
		var lMarker;
		var medialength;
		if (window.location.pathname.split('/')[1] === 'home' || window.location.pathname.split('/')[1] === 'geofocus') {
			for (var i = 0; i < datalength; i++) {
				getLayer(i, 0)
			}
			medialength = #{doc.content[doc.content.length-1].properties.media.length}
			lMarker = L.marker([#{doc.content[doc.content.length-1].geometry.coordinates[1]}, #{doc.content[doc.content.length-1].geometry.coordinates[0]}], {icon: customIcon}).addTo(map);

			map.setView([#{doc.content[doc.content.length-1].geometry.coordinates[1]}, #{doc.content[doc.content.length-1].geometry.coordinates[0]}])
		} else {
			getLayer(#{geoindex}, 'all')
			if (window.location.pathname.split('/')[2] !== 'addfeature' && window.location.pathname.split('/')[2] !== 'editcontent') {
				medialength = #{doc.content[index].properties.media.length}
				
				
				lMarker = L.marker([#{doc.content[index].geometry.coordinates[1]}, #{doc.content[index].geometry.coordinates[0]}], {icon: customIcon}).addTo(map);
			} else {
				if (window.location.pathname.split('/')[2] === 'addfeature') {
					medialength = 0;
				} else {
					medialength = #{doc.content[index].properties.media.length}
				}
				lMarker = L.marker([#{doc.content[index].geometry.coordinates[1]}, #{doc.content[index].geometry.coordinates[0]}], {draggable: true, icon: customIcon}).addTo(map);
				
			}
			map.setView([#{doc.content[index].geometry.coordinates[1]}, #{doc.content[index].geometry.coordinates[0]}])
		}
					
		map.on('zoomend', function(e){
			if (window.location.pathname.split('/')[2] === 'addfeature' || window.location.pathname.split('/')[2] === 'editcontent') {
				return false;
			}
			
			zoom = map.getZoom();
			var center = map.getCenter()
			var lat = center.lat;
			var lng = center.lng;
			if (window.location.pathname.split('/')[1] === 'home' || window.location.pathname.split('/')[1] === 'geofocus') {
				$.post('/zoom/'+geoindex+'/'+index+'/'+zoom+'/'+lat+'/'+lng+'', function(data){
					window.location.href = '/'+data;
					return false;
				})
			} else {
				$.post('/mydata/'+geoindex+'/'+index+'/'+zoom+'/'+lat+'/'+lng+'', function(data){
					window.location.href = '/'+data
				})
			}
			
			
		})
		$('.module').mouseleave(function(){
		    $(this).children('.hovertext').remove()
			$('#tl').children('.hovertext').remove()
			$(this).removeClass('hover')
			if ($(this).css('z-index') > 0) {
				$(this).css('z-index', '1')
			}
		});
		$('.module').mouseenter(function(){
			var title = $(this).attr('title');
			var name = $(this).attr('name')
			$('.module').removeClass('hover')
			$(this).addClass('hover')
			$('#tl').append('<span class="ms-font-xs ms-fontWeight-light hovertext" style="text-align: left">'+title+'</span>')
			$(this).append('<span class="ms-font-xs ms-fontWeight-light hovertext" style="text-align: left">'+name+'</span>')
			if ($(this).css('z-index') > 0) {
				$(this).css('z-index', '2')
			}
		})
		$(document).on('click', '.leaflet-interactive', function(e){
			if (window.location.pathname.split('/')[2] === 'addfeature' || window.location.pathname.split('/')[2] === 'editcontent' || window.location.pathname.split('/')[2] === 'editcontent') {
				lMarker.on('dragend', function(event){
					var marker = event.target;
				    var position = marker.getLatLng();
					console.log(position);
					marker.setLatLng(new L.LatLng(position.lat, position.lng),{draggable:'true'});
					map.panTo(new L.LatLng(position.lat, position.lng))
					$('form > #lat').val(position.lat)
					$('form > #lng').val(position.lng)
				});
			} else {
				zoom = map.getZoom();
				var center = map.getCenter()
				var lat = center.lat;
				var lng = center.lng;
				var d = $(this).attr('d').split('a')[0];
				var dxm = d.split(',')[0]
				var dx = parseInt(dxm.replace('M', ''), 10);
				var dy = parseInt(d.split(',')[1], 10);
				var rangex = [dx-5, dx-4, dx-2, dx-1, dx, dx+1, dx+2, dx+3, dx+4, dx+5];
				var rangey = [dy-5, dy-4, dy-2, dy-1, dy, dy+1, dy+2, dy+3, dy+4, dy+5];
				
				var grid = [[]];
				for (var x = 0; x < rangex.length; x++) {
					grid[x] = [];
					for (var y = 0; y < rangey.length; y++) {
						grid[x][y] = 'M' + rangex[x] + ',' + rangey[y]
					}
				}
				/*var grid = [ for ( x of rangex ) [ for ( y of rangey) 'M' + x + ',' + y ] ]*/
				console.log(rangex, rangey, grid)
				var that = $(document).find($("path[d^='"+d+"']"))
				console.log(d, that)
				var list = 0;
				for (var i in grid) {
					for (var j in grid[i]) {
						var indexes = []
						for (var k = 0; k < $('#map').find($("path[d^='"+grid[i][j]+"']")).length; k++) {
							if ($('#map').find($("path[d^='"+grid[i][j]+"']")[k]).attr('class') !== undefined) {
								list++;
								var classi = $('#map').find($("path[d^='"+grid[i][j]+"']")[k]).attr('class');
								var idi = classi.split(' ')[0]
								console.log(classi)
								var geoindi = idi.split('@')[0]
								var indexi = idi.split('@')[1];
								$.ajax({
									url: '/list/'+geoindi+'/'+indexi+'/'+zoom+'/'+lat+'/'+lng+'',
									processData: false,
									contentType: false,
									type: 'POST',
									success: function(data){
										var thisclass = 
										$('.list > .ms-Grid > .ms-Panel-contentInner').append('<a href="/focus/'+geoindi+'/'+indexi+'/6/null/null" class="ms-Grid-col ms-u-sm12"><span class="ms-font-m">'+data.properties.label+'</span></a>')
										map.setView([data.geometry.coordinates[1], data.geometry.coordinates[0]])
										lMarker.remove()
									}
								});
							} else {

							}

						}

					}												
				}
				if (list > 1) {
					console.log(list)
					$('.list').css({display: 'block'})
					$('.list > .ms-Panel-main').css({display: 'block'})
					$('.list').addClass("is-open");
					$('.list > .ms-Grid > .ms-Panel-contentInner').prepend('<p class="ms-font-s">'+list+' features nearby:</p>');
					map.dragging.disable();
					map.touchZoom.disable();
					map.doubleClickZoom.disable();
					map.scrollWheelZoom.disable();
					map.boxZoom.disable();
					map.keyboard.disable();
					if (map.tap) map.tap.disable();
					document.getElementById('map').style.cursor='default';
					$('.list > .js-togglePanel').css('pointer-events', 'auto')


				} else {
					var id = $(this).attr('class').split(' ')[0]
					var userid = id.split('@')[0]
					var index = id.split('@')[1]
					console.log(id)

					$.post('/focus/'+geoindex+'/'+index+'/'+6+'/'+lat+'/'+lng+'', function(){
						window.location.href = '/focus/'+geoindex+'/'+index+'/'+6+'/'+lat+'/'+lng+''
					})
				}
				
			}
		})
		$(document).on('click', '.list > .js-togglePanel', function(){
			$('.list > .ms-Panel-main').css({display: 'none'})
			$('.list').removeClass('is-open')
			$('.list').css({display: 'none'})
			$('.list > .ms-Grid > .ms-Panel-contentInner').html('')
		})
		$(document).on('click', '#editform', function(){
			if ($('#formshow').css('display') === 'none') {
				$('#formshow').css('display', 'block');
				$('#editform > span').html('Hide Feature details')
			} else {
				$('#formshow').css('display', 'none');
				$('#editform > span').html('Show Feature details')
			}
		})
		$(document).on('click', '#editmedia', function(){
			if ($('#mediashow').css('display') === 'none') {
				$('#mediashow').css('display', 'block');
				$('#editmedia > span').html('Hide Media details')
			} else {
				$('#mediashow').css('display', 'none');
				$('#editmedia > span').html('Show Media details')
			}
		})
		$(document).on('click', '#editlayout', function(){
			if ($('#layoutshow').css('display') === 'none') {
				$('#layoutshow').css('display', 'block');
				$('#editlayout > span').html('Hide Layout details')
			} else {
				$('#layoutshow').css('display', 'none');
				$('#editlayout > span').html('Show Layout details')
			}
		})
		/*$(document).on('click', '#bold', function(){
			
		})
		$('#inputtext').on('mouseup', function(e){
				
			var whole = e.target.value.split("")
			var selObj = window.getSelection();
			console.log(selObj.toString());
			var selRange = selObj.getRangeAt(0)
			console.log(selRange)
			var select = selObj.toString();
			
			whole.splice(selObj.focusOffset, selObj.length, "<span class='highlight'>"+select+"</span>");
			$('#previewtext').html(marked(whole.join("")))
		})*/
		$('#inputtext').on('keyup', function(e){
			$('#previewtext').html(marked(e.target.value))
		})
		$(document).on('click', '#deletefeature', function(){

			if ($('#deletefeature span').css('display') === 'block') {
				$(this).attr("href", "/api/deletefeature/"+#{index}+"");
			} else {
				$('#deletefeature span').css('display', 'block')
			}
		})
		$(document).on('focus', 'textarea', function(){
			var text = $(this).attr('placeholder');
			$(this).val(text)
			$(this).css('max-width', '100%')
		})

		var counter; 
		var uploadurl;
		var index;
		var img;
		
		
		$(document).on('change', '#media', function(e){
			e.preventDefault();
			if (counter === undefined){
				counter = medialength;
			}
			if (window.location.pathname.split('/')[2] === 'addfeature') {
				index = #{index} + 1
			} else {
				index = #{index}
			}
			$('#appendcanvas').prepend('<div class="ms-ListItem-image spacer" style="margin: 10px 10px 10px 0"><canvas id="canvas'+counter+'"></canvas></div><div class="ms-Grid-row"><img id="return'+counter+'"></img><input type="hidden" id="inputthumb'+counter+'" name="thumb'+counter+'"></input><input type="hidden" id="inputimg'+counter+'" name="img'+counter+'"></input></div><div class="ms-Grid-row"><div class="ms-Grid-col ms-u-sm12"><div class="ms-TextField"><label class="ms-Label"> Image Title </label><input class="ms-TextField-field" type="text" name="img'+counter+'_name"></input></div><div class="ms-TextField"><label class="ms-Label"> Image Caption </label><textarea class="ms-TextField-field" type="text" name="img'+counter+'_caption"></textarea></div><div class="ms-TextField"><label class="ms-Label"> Image URL </label><input class="ms-TextField-field" type="text" name="img'+counter+'_url"></input></div></div>')
			setTimeout(function(){
				processImage()	
			}, 200)
					
		});

		function processImage() {
			
		    var dataurl = null;
		    var filesToUpload = document.getElementById('media').files;
		    var file = filesToUpload[0];
			var imagefile = file.type;
			console.log(file.name)
			var imageTypes= ["image/jpeg","image/png","image/jpg"];
			if(imageTypes.indexOf(imagefile) == -1) {
				if (imagefile == "application/pdf") {
					var fd = new FormData();

					fd.append("img", file);
					
					uploadurl = '/api/uploadmedia/'+geoindex+'/'+index+'/'+counter+'/pdf';

					console.log(uploadurl)
					$.ajax({
					    url: uploadurl,
					    type: 'POST',
					    data: fd,
						processData: false,
						contentType: false,
					    success: function(response) { 
							
							$('#inputthumb'+counter+'').val('/images/publish_logo_sq.svg')
							$('#inputimg'+counter+'').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''))
							$('#canvas'+counter+'').parent().append('<img src="/images/publish_logo_sq.svg"></img>');
							$('#canvas'+counter+'').remove();
							countUp(counter)
						}
					})
				} else {
					$("#info").html("<span class='msg-error'>Please Select A valid Image File</span><br /><span>Only jpeg, jpg, png, and pdf types allowed</span>");
					return false;
				}
				
			} else {
				img = document.getElementById('return'+counter+'');
			    var reader = new FileReader();
				
			    reader.onloadend = function(e) {
					var maxWidth = 1200 ;
		        	var maxHeight = 1200 ;
					img.src = e.target.result;
			        img.onload = function () {

						$('#media').val('')
						var w = img.width;
						var h = img.height;
						var can = $('#canvas'+counter+'')[0];
						checkImage(can, w, h, maxWidth, maxHeight)
			        }
				}
			    reader.readAsDataURL(file);
			}
		}
		
		function reSize(can, w, h, maxWidth, maxHeight){
			can.height = h*0.75;
			can.width = w*0.75;

			var can2 = document.createElement('canvas');
			can2.width = w*0.75;
		    can2.height = h*0.75;
		    var ctx2 = can2.getContext('2d');

		    ctx2.drawImage(img, 0, 0, w*0.75, h*0.75);
			var ctx = can.getContext('2d');
			ctx.drawImage(can2, 0, 0, w*0.75, h*0.75, 0, 0, w*0.75, h*0.75);
			w = w*0.75;
			h = h*0.75;
			img.width = w;
			img.height = h;
			checkImage(can, w, h, maxWidth, maxHeight)
		}
		function checkImage(can, w, h, maxWidth, maxHeight) {
			
			
			if (h > maxHeight) {
				console.log('half')
				reSize(can, w, h, maxWidth, maxHeight)
			} else {
				if (maxHeight === 200) {
					drawThumb(can, w, h)
				} else {
					drawImage(can, w, h)
				}						
			}						
		}	
			
		function drawImage(can, w, h) {
			can.height = h;
			can.width = w;
			var ctx = can.getContext('2d');
			ctx.drawImage(img, 0, 0, w, h);
			if (!HTMLCanvasElement.prototype.toBlob) {
			 Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
			  value: function (callback, type, quality) {

			    var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
			        len = binStr.length,
			        arr = new Uint8Array(len);

			    for (var i = 0; i < len; i++ ) {
			     arr[i] = binStr.charCodeAt(i);
			    }

			    callback( new Blob( [arr], {type: type || 'image/png'} ) );
			  }
			 });
			}
			can.toBlob(function(blob) {
				var fd = new FormData();

				fd.append("img", blob);
				
				uploadurl = '/api/uploadmedia/'+geoindex+'/'+index+'/'+counter+'/jpeg';

				console.log(blob)
				console.log(uploadurl)
				$.ajax({
				    url: uploadurl,
				    type: 'POST',
				    data: fd,
					processData: false,
					contentType: false,
				    success: function(response) { 
						img.src = response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', '');
				        img.onload = function () {
							$('#inputimg'+counter+'').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''))
							var can = $('#canvas'+counter+'')[0];
							var maxWidth = 200 ;
				        	var maxHeight = 200 ;								
							var w = img.width;
							var h = img.height;
							checkImage(can, w, h, maxWidth, maxHeight)
				        }
					}
				})
			}, 'image/jpeg', 0.95);
		}
		function drawThumb(can, w, h) {
			can.height = h;
			can.width = w;
			var ctx = can.getContext('2d');
			ctx.drawImage(img, 0, 0, w, h);
			dataurl = can.toDataURL("image/jpeg", 0.8);
			setTimeout(function(){
				
				$('#inputthumb'+counter+'').val(dataurl.replace(/data:image\/jpeg;base64,/, ''))
				countUp(parseInt(counter, 10))
								
			}, 100)
		}
		function countUp(count) {
			if ((count+1) - medialength === 3) {
				$('#media').css('display: none')
				return false;
			} else {
				
				
				count++;
				counter = count;
			}
			
		}
		
